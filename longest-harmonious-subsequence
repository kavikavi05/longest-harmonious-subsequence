typedef struct { int num; short count; } Frq_t;

int cmpFunc(const void* a, const void* b){ return *(int*)a - *(int*)b; }

int findLHS(int* nums, int numsSize){
    short result=0, frqSize=0, temp; Frq_t frqs[numsSize];
    memset(frqs, 0, numsSize*sizeof(Frq_t));

    qsort(nums, numsSize, sizeof(int), cmpFunc);
    frqs[frqSize]=(Frq_t){nums[0],1};
    for(int i=1; i<numsSize; i++) {
        if(nums[i]==frqs[frqSize].num)
        { frqs[frqSize].count++; continue; }

        if(frqSize&&frqs[frqSize-1].num==frqs[frqSize].num-1) {
            temp=frqs[frqSize].count+frqs[frqSize-1].count;
            result=result>=temp?result:temp;
        }

        frqs[++frqSize]=(Frq_t){nums[i], 1};
    }
    if(frqSize&&frqs[frqSize-1].num==frqs[frqSize].num-1) {
        temp=frqs[frqSize].count+frqs[frqSize-1].count;
        result=result>=temp?result:temp;
    }

    return result;
}
